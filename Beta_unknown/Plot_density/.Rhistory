XmOU1_2dEULER=function(j,n)
{
#tray
X=matrix(0,2,n+1)
X[,1]=c(0,0)
for(i in 1:n)
{
X[1,i+1]=X[1,i]+(-(M[1,1]*X[1,i]+M[1,2]*X[2,i]) + (sigma11+sigma12)*sqrt(2/tf)*sin(1*pi*Tiempo[i]/tf))*delta
X[2,i+1]=X[2,i]+(-(M[2,1]*X[1,i]+M[2,2]*X[2,i]) + (sigma21+sigma22)*sqrt(2/tf)*sin(j*pi*Tiempo[i]/tf))*delta
}
return(X)
}
XmOU2_2dEULER=function(j,n)
{
#tray
X=matrix(0,2,n+1)
X[,1]=c(0,0)
for(i in 1:n)
{
X[1,i+1]=X[1,i]+(-(M[1,1]*X[1,i]+M[1,2]*X[2,i]) + (sigma11+sigma12)*sqrt(2/tf)*sin(2*pi*Tiempo[i]/tf))*delta
X[2,i+1]=X[2,i]+(-(M[2,1]*X[1,i]+M[2,2]*X[2,i]) + (sigma21+sigma22)*sqrt(2/tf)*sin(j*pi*Tiempo[i]/tf))*delta
}
return(X)
}
OU_2dRK=function(j,n)
{
#tray
X=matrix(0,2,n+1)
X[,1]=c(0,0)
for(i in 1:n)
{
RK11 = -(M[1,1]*X[1,i]+M[1,2]*X[2,i])
RK12 = -(M[2,1]*X[1,i]+M[2,2]*X[2,i])
RK21 = -(M[1,1]*(X[1,i]+0.5*delta*RK11)+M[1,2]*(X[2,i]+0.5*delta*RK12))
RK22 = -(M[2,1]*(X[1,i]+0.5*delta*RK11)+M[2,2]*(X[2,i]+0.5*delta*RK12))
RK31 = -(M[1,1]*(X[1,i]+0.5*delta*RK21)+M[1,2]*(X[2,i]+0.5*delta*RK22))
RK32 = -(M[2,1]*(X[1,i]+0.5*delta*RK21)+M[2,2]*(X[2,i]+0.5*delta*RK22))
RK41 = -(M[1,1]*(X[1,i]+delta*RK31)+M[1,2]*(X[2,i]+delta*RK32))
RK42 = -(M[2,1]*(X[1,i]+delta*RK31)+M[2,2]*(X[1,i]+delta*RK32))
X[1,i+1] = X[1,i] + (1/6)*delta*(RK11+2*RK21+2*RK31+RK41)
X[2,i+1] = X[2,i] + (1/6)*delta*(RK12+2*RK22+2*RK32+RK42)
}
return(X)
}
OU_2dEULER=function(x0,n)
{
#tray
X=matrix(0,2,n+1)
X[,1]=x0
for(i in 1:n)
{
X[1,i+1]=X[1,i]+(-(M[1,1]*X[1,i]+M[1,2]*X[2,i]))*delta
X[2,i+1]=X[2,i]+(-(M[2,1]*X[1,i]+M[2,2]*X[2,i]))*delta
}
return(X)
}
#integral con respecto a Xms
Integrate2d_Xms=function(path,Xms)
{
npoints=length(path)
integral = matrix(0,2,npoints)
integral1=numeric(npoints)
integral2=numeric(npoints)
for( i in 2:npoints)
{
integral1[i]=(Xms[1,i]-Xms[1,i-1])*(path[i-1]+path[i])/2.0
integral2[i]=(Xms[2,i]-Xms[2,i-1])*(path[i-1]+path[i])/2.0
}
integral1=cumsum(integral1)
integral2=cumsum(integral2)
integral[1,] <-integral1
integral[2,] <-integral2
return(integral)
}
#calcula senos
fsenos=function(n,TiempoC)
{
TL<-length(TiempoC)
TF=tail(TiempoC,1)
senos<-mat.or.vec(n,TL)
for(i in 1:n){
senos[i,]=sin(i*pi*TiempoC/TF)
}
return(senos)
}
#calcula cosenos
fcosenos=function(n,TiempoC)
{
TL<-length(TiempoC)
TF=tail(TiempoC,1)
cosenos<-mat.or.vec(n,TL)
for(i in 1:n){
cosenos[i,]=cos(i*pi*TiempoC/TF)
}
return(cosenos)
}
####################
####################
XmOU1_2dRK=function(j,n)
{
#tray
X=matrix(0,2,n+1)
X[,1]=c(0,0)
for(i in 1:n)
{
RK11 = -(M[1,1]*X[1,i]+M[1,2]*X[2,i]) + sigma11*sqrt(2/tf)*sin(1*pi*Tiempo[i]/tf)+sigma12*sqrt(2/tf)*sin(j*pi*Tiempo[i]/tf)
RK12 = -(M[2,1]*X[1,i]+M[2,2]*X[2,i]) + sigma21*sqrt(2/tf)*sin(1*pi*Tiempo[i]/tf)+sigma22*sqrt(2/tf)*sin(j*pi*Tiempo[i]/tf)
RK21 = -(M[1,1]*(X[1,i]+0.5*delta*RK11)+M[1,2]*(X[2,i]+0.5*delta*RK12)) + sigma11*sqrt(2/tf)*sin(1*pi*(Tiempo[i]+delta/2)/tf)+sigma12*sqrt(2/tf)*sin(j*pi*(Tiempo[i]+delta/2)/tf)
RK22 = -(M[2,1]*(X[1,i]+0.5*delta*RK11)+M[2,2]*(X[2,i]+0.5*delta*RK12)) + sigma21*sqrt(2/tf)*sin(1*pi*(Tiempo[i]+delta/2)/tf)+sigma22*sqrt(2/tf)*sin(j*pi*(Tiempo[i]+delta/2)/tf)
RK31 = -(M[1,1]*(X[1,i]+0.5*delta*RK21)+M[1,2]*(X[2,i]+0.5*delta*RK22)) + sigma11*sqrt(2/tf)*sin(1*pi*(Tiempo[i]+delta/2)/tf)+sigma12*sqrt(2/tf)*sin(j*pi*(Tiempo[i]+delta/2)/tf)
RK32 = -(M[2,1]*(X[1,i]+0.5*delta*RK21)+M[2,2]*(X[2,i]+0.5*delta*RK22)) + sigma21*sqrt(2/tf)*sin(1*pi*(Tiempo[i]+delta/2)/tf)+sigma22*sqrt(2/tf)*sin(j*pi*(Tiempo[i]+delta/2)/tf)
RK41 = -(M[1,1]*(X[1,i]+delta*RK31)+M[1,2]*(X[2,i]+delta*RK32)) +sigma11*sqrt(2/tf)*sin(1*pi*(Tiempo[i]+delta)/tf)+sigma12*sqrt(2/tf)*sin(j*pi*(Tiempo[i]+delta)/tf)
RK42 = -(M[2,1]*(X[1,i]+delta*RK31)+M[2,2]*(X[1,i]+delta*RK32)) +sigma21*sqrt(2/tf)*sin(1*pi*(Tiempo[i]+delta)/tf)+sigma22*sqrt(2/tf)*sin(j*pi*(Tiempo[i]+delta)/tf)
X[1,i+1] = X[1,i] + (1/6)*delta*(RK11+2*RK21+2*RK31+RK41)
X[2,i+1] = X[2,i] + (1/6)*delta*(RK12+2*RK22+2*RK32+RK42)
}
return(X)
}
library("plot3D")
#System conf
n<-1000
nb <-500
t0 <-0
tf <-1
delta <- (tf-t0)/n
Tiempo <-seq(t0, tf, length.out = n+1)
TL<-length(Tiempo)
#initial conditions
x01 <- 0
x02 <- 0
M11 <-1.5
M12 <-1
M21 <-1
M22 <-1.5
sigma11 <-1
sigma12 <-1
sigma21 <-1
sigma22 <-1
theta <- c(1,1)
x0 <- c(x01,x02)
M <- matrix(c(M11,M12,M21,M22),nrow = 2,ncol = 2)
Sigma <- matrix(c(sigma11,sigma12,sigma21,sigma22),nrow = 2,ncol = 2)
M_Y1=mat.or.vec(10,TL)
M_Y2=mat.or.vec(10,TL)
M2_Y1=mat.or.vec(10,TL)
M2_Y2=mat.or.vec(10,TL)
X_0<- OU_2dRK(x0,n)
Y_0<-matrix(0,2,n+1)
int1 <- matrix(0,2,n+1)
int1=cbind((Tiempo[TL]-Tiempo[1:(TL-1)])*Integrate2d_Xms(1/(tf-Tiempo[-TL]),X_0),0)
for(i in 1:TL)
{
Y_0[1,i]= x0[1]+(theta[1]-x0[1])*Tiempo[i]/tf+int1[1,i]
Y_0[2,i]= x0[2]+(theta[2]-x0[2])*Tiempo[i]/tf+int1[2,i]
}
#### propagator for |m|=1
Y1x1=NULL
Y1x2=NULL
Y1_aux=NULL
Y2x1=NULL
Y2x2=NULL
Y2_aux=NULL
for(i in 1:nb){
X_1<-XmOU1_2dRK(i,n)
X_2<-XmOU2_2dRK(i,n)
Y1_aux <- cbind((Tiempo[TL]-Tiempo[1:(TL-1)])*Integrate2d_Xms(1/(tf-Tiempo[-TL]),X_1),0)
Y1x1 <-rbind(Y1x1,Y1_aux[1,])
Y1x2 <-rbind(Y1x2,Y1_aux[2,])
Y2_aux <- cbind((Tiempo[TL]-Tiempo[1:(TL-1)])*Integrate2d_Xms(1/(tf-Tiempo[-TL]),X_2),0)
Y2x1 <-rbind(Y2x1,Y2_aux[1,])
Y2x2 <-rbind(Y2x2,Y2_aux[2,])
}
for (k in 1:10){
print(k)
X1is=rnorm(nb,0,1)
X2is=rnorm(nb,0,1)#fXis(nb,TiempoC)
M_Y1[k,]=apply(Y1x1*X1is[1]*X2is,2,sum)+apply(Y2x1*X2is*X1is[2],2,sum)+Y_0[1,]
M_Y2[k,]=apply(Y1x2*X1is[1]*X2is,2,sum)+apply(Y2x2*X1is[2]*X2is,2,sum)+Y_0[2,]
#M_Y[k,]=Y_0
}
#return(Tiempo,M_Y1)
par(mfrow=c(2,2))
plot(Tiempo,M_Y1[1,],type = 'l',xlab="t",ylab="X1_t")
plot(Tiempo,M_Y2[1,],type = 'l',xlab="t",ylab="Y1_t")
plot(Tiempo,M_Y1[2,],type = 'l',xlab="t",ylab="X1_t")
plot(Tiempo,M_Y2[2,],type = 'l',xlab="t",ylab="Y2_t")
par(mfrow=c(1,2))
lines3D(Tiempo, M_Y1[1,], M_Y2[1,],main=c("Brownian motions",nb),xlab="t",ylab="X_t",zlab="Y_t",col="black",colkey = FALSE,ticktype = "detailed")
lines3D(Tiempo, M_Y1[2,], M_Y2[2,],main=c("Brownian motions",nb),xlab="t",ylab="X_t",zlab="Y_t",col="black",colkey = FALSE,ticktype = "detailed")
Tiempo[-TL]
Tiempo[-TL]
Y1x1
Y1x1*X1is[1]
X1is[1]
Y1x1
length(Y1x1*X1is[1])
length(Y1x1*X1is[1]*X2is)
length(Y1x1*X2is)
length(X2is)
library("plot3D")
#System conf
n<-10000
nb <-500
t0 <-0
tf <-1
delta <- (tf-t0)/n
Tiempo <-seq(t0, tf, length.out = n+1)
TL<-length(Tiempo)
#initial conditions
x01 <- 0
x02 <- 0
M11 <-1.5
M12 <-1
M21 <-1
M22 <-1.5
sigma11 <-1
sigma12 <-1
sigma21 <-1
sigma22 <-1
theta <- c(1,1)
x0 <- c(x01,x02)
M <- matrix(c(M11,M12,M21,M22),nrow = 2,ncol = 2)
Sigma <- matrix(c(sigma11,sigma12,sigma21,sigma22),nrow = 2,ncol = 2)
M_Y1=mat.or.vec(10,TL)
M_Y2=mat.or.vec(10,TL)
M2_Y1=mat.or.vec(10,TL)
M2_Y2=mat.or.vec(10,TL)
X_0<- OU_2dRK(x0,n)
Y_0<-matrix(0,2,n+1)
int1 <- matrix(0,2,n+1)
int1=cbind((Tiempo[TL]-Tiempo[1:(TL-1)])*Integrate2d_Xms(1/(tf-Tiempo[-TL]),X_0),0)
for(i in 1:TL)
{
Y_0[1,i]= x0[1]+(theta[1]-x0[1])*Tiempo[i]/tf+int1[1,i]
Y_0[2,i]= x0[2]+(theta[2]-x0[2])*Tiempo[i]/tf+int1[2,i]
}
#### propagator for |m|=1
Y1x1=NULL
Y1x2=NULL
Y1_aux=NULL
Y2x1=NULL
Y2x2=NULL
Y2_aux=NULL
for(i in 1:nb){
X_1<-XmOU1_2dRK(i,n)
X_2<-XmOU2_2dRK(i,n)
Y1_aux <- cbind((Tiempo[TL]-Tiempo[1:(TL-1)])*Integrate2d_Xms(1/(tf-Tiempo[-TL]),X_1),0)
Y1x1 <-rbind(Y1x1,Y1_aux[1,])
Y1x2 <-rbind(Y1x2,Y1_aux[2,])
Y2_aux <- cbind((Tiempo[TL]-Tiempo[1:(TL-1)])*Integrate2d_Xms(1/(tf-Tiempo[-TL]),X_2),0)
Y2x1 <-rbind(Y2x1,Y2_aux[1,])
Y2x2 <-rbind(Y2x2,Y2_aux[2,])
}
for (k in 1:10){
print(k)
X1is=rnorm(nb,0,1)
X2is=rnorm(nb,0,1)#fXis(nb,TiempoC)
M_Y1[k,]=apply(Y1x1*X1is[1]*X2is,2,sum)+apply(Y2x1*X2is*X1is[2],2,sum)+Y_0[1,]
M_Y2[k,]=apply(Y1x2*X1is[1]*X2is,2,sum)+apply(Y2x2*X1is[2]*X2is,2,sum)+Y_0[2,]
#M_Y[k,]=Y_0
}
#return(Tiempo,M_Y1)
par(mfrow=c(2,2))
plot(Tiempo,M_Y1[1,],type = 'l',xlab="t",ylab="X1_t")
plot(Tiempo,M_Y2[1,],type = 'l',xlab="t",ylab="Y1_t")
plot(Tiempo,M_Y1[2,],type = 'l',xlab="t",ylab="X1_t")
plot(Tiempo,M_Y2[2,],type = 'l',xlab="t",ylab="Y2_t")
par(mfrow=c(1,2))
lines3D(Tiempo, M_Y1[1,], M_Y2[1,],main=c("Brownian motions",nb),xlab="t",ylab="X_t",zlab="Y_t",col="black",colkey = FALSE,ticktype = "detailed")
lines3D(Tiempo, M_Y1[2,], M_Y2[2,],main=c("Brownian motions",nb),xlab="t",ylab="X_t",zlab="Y_t",col="black",colkey = FALSE,ticktype = "detailed")
View(Y1x1)
View(Y1x1)
apply(Y1x1*X1is[1]*X2is,2,sum)
length(apply(Y1x1*X1is[1]*X2is,2,sum))
View(Y1x1)
length(Y_0[1,])
prob_succe <- 0.5
max_ number_trial <- 10
Trail <- rber(max_ number_trial,number_trial,prob_succe)
prob_succe <- 0.5
max_ number_trial <- 10
prob_succe <- 0.5
max_ number_trial <- 10
number_trial <- 1
prob_succe <- 0.5
max_ number_trial <- 10
prob_succe <- 0.5
max_number_trial <- 10
number_trial <- 1
Trails <- rbinom(max_ number_trial,number_trial,prob_succe)
Trails <- rbinom(max_number_trial,number_trial,prob_succe)
Trails
Trails <- rbinom(max_number_trial,number_trial,prob_succe)
Trails
prob <- 0.5
max_number_trial <- 10
number_trial <- 1
sum(Trails == 1)
prob_succe <- sum(Trails == 1)/max_number_trial
prob_succe
prob <- 0.5
max_number_trial <- 100
number_trial <- 1
Trails <- rbinom(max_number_trial,number_trial,prob)
prob_succe <- sum(Trails == 1)/max_number_trial
prob <- 0.5
max_number_trial <- 100
number_trial <- 1
Trails <- rbinom(max_number_trial,number_trial,prob)
prob_succe <- sum(Trails == 1)/max_number_trial
prob_succe
prob <- 0.5
max_number_trial <- 100
number_trial <- 1
Trails <- rbinom(max_number_trial,number_trial,prob)
prob_succe <- sum(Trails == 1)/max_number_trial
prob_succe
prob <- 0.5
max_number_trial <- 100
number_trial <- 1
Trails <- rbinom(max_number_trial,number_trial,prob)
prob_succe <- sum(Trails == 1)/max_number_trial
prob_succe
####### Flip coin ########
prob <- 0.1
max_number_trial <- 100
number_trial <- 1
Trails <- rbinom(max_number_trial,number_trial,prob)
prob_succe <- sum(Trails == 1)/max_number_trial
prob_succe
####### Flip coin ########
prob <- 0.1
max_number_trial <- 100
number_trial <- 1
Trails <- rbinom(max_number_trial,number_trial,prob)
prob_succe <- sum(Trails == 1)/max_number_trial
prob_succe
####### Flip coin ########
prob <- 0.1
max_number_trial <- 100
number_trial <- 1
Trails <- rbinom(max_number_trial,number_trial,prob)
prob_succe <- sum(Trails == 1)/max_number_trial
prob_succe
####### Flip coin ########
prob <- 0.1
max_number_trial <- 100
number_trial <- 1
Trails <- rbinom(max_number_trial,number_trial,prob)
prob_succe <- sum(Trails == 1)/max_number_trial
prob_succe
####### Flip coin ########
prob <- 0.1
max_number_trial <- 10000
number_trial <- 1
Trails <- rbinom(max_number_trial,number_trial,prob)
prob_succe <- sum(Trails == 1)/max_number_trial
prob_succe
####### Flip coin ########
prob <- 0.1
max_number_trial <- 10000
number_trial <- 1
Trails <- rbinom(max_number_trial,number_trial,prob)
prob_succe <- sum(Trails == 1)/max_number_trial
prob_succe
####### Flip coin ########
prob <- 0.1
max_number_trial <- 1000000
number_trial <- 1
Trails <- rbinom(max_number_trial,number_trial,prob)
prob_succe <- sum(Trails == 1)/max_number_trial
prob_succe
####### Flip coin ########
prob <- 0.1
max_number_trial <- 1000000
number_trial <- 1
Trails <- rbinom(max_number_trial,number_trial,prob)
prob_succe <- sum(Trails == 1)/max_number_trial
prob_succe
####### Flip coin ########
prob <- 0.1
max_number_trial <- 1000000
number_trial <- 1
Trails <- rbinom(max_number_trial,number_trial,prob)
prob_succe <- sum(Trails == 1)/max_number_trial
prob_succe
####### Flip coin ########
prob <- 0.1
max_number_trial <- 1000000
number_trial <- 1
Trails <- rbinom(max_number_trial,number_trial,prob)
prob_succe <- sum(Trails == 1)/max_number_trial
prob_succe
####### Flip coin ########
prob <- 0.1
max_number_trial <- 1000000
number_trial <- 1
Trails <- rbinom(max_number_trial,number_trial,prob)
prob_succe <- sum(Trails == 1)/max_number_trial
prob_succe
####### Flip coin ########
prob <- 0.1
max_number_trial <- 1000000
number_trial <- 1
Trails <- rbinom(max_number_trial,number_trial,prob)
prob_succe <- sum(Trails == 1)/max_number_trial
prob_succe
####### Flip coin ########
prob <- 0.1
max_number_trial <- 1000000
number_trial <- 1
Trails <- rbinom(max_number_trial,number_trial,prob)
prob_succe <- sum(Trails == 1)/max_number_trial
prob_succe
####### Flip coin ########
prob <- 0.1
max_number_trial <- 1000000
number_trial <- 1
Trails <- rbinom(max_number_trial,number_trial,prob)
prob_succe <- sum(Trails == 1)/max_number_trial
prob_succe
####### Flip coin ########
prob <- 0.1
max_number_trial <- 100
number_trial <- 1
Trails <- rbinom(max_number_trial,number_trial,prob)
prob_succe <- sum(Trails == 1)/max_number_trial
prob_succe
####### Flip coin ########
prob <- 0.1
max_number_trial <- 1000
number_trial <- 1
Trails <- rbinom(max_number_trial,number_trial,prob)
prob_succe <- sum(Trails == 1)/max_number_trial
prob_succe
par(mfrow = c(1, 2))
for (i in 1:max_number_trial)
{
plot(Trails[1:i])
}
plot(prob_succe[1:i])
library(ggplot2)
library(dplyr)
beta=1
X_data0.1 <- read.csv("Chaos_Data_alpha0.1_beta1.0_T10_lambda805.csv",header = T)
setwd("D:/DiffusionBridgesWienerExpantion/Stochastic_Inference_Wiener_Chaos/Beta_unknown/Plot_density")
library(ggplot2)
library(dplyr)
beta=1
X_data0.1 <- read.csv("Chaos_Data_alpha0.1_beta1.0_T10_lambda805.csv",header = T)
X_data0.5 <- read.csv("Chaos_Data_alpha0.5_beta1.0_T10_lambda805.csv", header = T)
X_data0.8 <- read.csv("Chaos_Data_alpha0.8_beta1.0_T10_lambda840.csv", header = T)
X_data1.0 <- read.csv("Chaos_Data_alpha1.0_beta1.0_T10_lambda815.csv", header = T)
layout(matrix(c(1,2), nrow = 1, ncol = 2, byrow = TRUE))
plot(X_data1.0[,2],main="Truncated Normal",xlab ="", ylab=expression(beta))
abline(h=mean_alphas[1], col="red")
layout(matrix(c(1,2), nrow = 1, ncol = 2, byrow = TRUE))
plot(X_data0.1[,2],main="Truncated Normal",xlab ="", ylab=expression(beta))
abline(h=mean_alphas[1], col="red")
layout(matrix(c(1,2), nrow = 1, ncol = 2, byrow = TRUE))
plot(1/X_data0.1[,2],main="Truncated Normal",xlab ="", ylab=expression(beta))
abline(h=mean_alphas[1], col="red")
hist(1/X_data0.1[,2],prob = TRUE,main = expression(paste("Densities of ", beta)),
xlab=expression(beta),col= "white", ylim = c(0,450))
lines(density(X_data0.1[,2]), col= "red")
layout(matrix(c(1,2), nrow = 1, ncol = 2, byrow = TRUE))
plot(1/X_data0.1[,2],main="Truncated Normal",xlab ="", ylab=expression(beta))
abline(h=mean(1/X_data0.1[,2]), col="red")
abline(h=beta, col="blue")
#plot(alphas[2,],main="Normal",xlab ="Sample size", ylab=expression(alpha))
#abline(h=alpha, col="blue")
#abline(h=mean_alphas[2], col="red")
hist(1/X_data0.1[,2],prob = TRUE,main = expression(paste("Densities of ", beta)),
xlab=expression(beta),col= "white", ylim = c(0,450))
lines(density(X_data0.1[,2]), col= "red")
layout(matrix(c(1,2), nrow = 1, ncol = 2, byrow = TRUE))
plot(1/X_data0.1[,2],main="Truncated Normal",xlab ="", ylab=expression(beta))
abline(h=mean(1/X_data0.1[,2]), col="red",ylim=c(0.95,1.05))
abline(h=beta, col="blue")
#plot(alphas[2,],main="Normal",xlab ="Sample size", ylab=expression(alpha))
#abline(h=alpha, col="blue")
#abline(h=mean_alphas[2], col="red")
hist(1/X_data0.1[,2],prob = TRUE,main = expression(paste("Densities of ", beta)),
xlab=expression(beta),col= "white", ylim = c(0,450))
lines(density(X_data0.1[,2]), col= "red")
layout(matrix(c(1,2), nrow = 1, ncol = 2, byrow = TRUE))
plot(1/X_data0.1[,2],main="Truncated Normal",xlab ="", ylab=expression(beta))
abline(h=mean(1/X_data0.1[,2]), col="red",ylim=c(0.95,1.05))
abline(h=beta, col="blue")
plot(1/X_data0.1[,2],main="Truncated Normal",xlab ="", ylab=expression(beta),ylim=c(0.95,1.05))
abline(h=mean(1/X_data0.1[,2]), col="red")
abline(h=beta, col="blue")
layout(matrix(c(1,2), nrow = 1, ncol = 2, byrow = TRUE))
plot(1/X_data0.1[,2],main="Truncated Normal",xlab ="", ylab=expression(beta),ylim=c(0.95,1.05))
abline(h=mean(1/X_data0.1[,2]), col="red")
abline(h=beta, col="blue")
#plot(alphas[2,],main="Normal",xlab ="Sample size", ylab=expression(alpha))
#abline(h=alpha, col="blue")
#abline(h=mean_alphas[2], col="red")
hist(1/X_data0.1[,2],prob = TRUE,main = expression(paste("Densities of ", beta)),
xlab=expression(beta),col= "white", ylim = c(0,450))
lines(density(X_data0.1[,2]), col= "red")
layout(matrix(c(1,2), nrow = 1, ncol = 2, byrow = TRUE))
plot(1/X_data0.1[,2],main="Truncated Normal",xlab ="", ylab=expression(beta),ylim=c(0.95,1.05))
abline(h=mean(1/X_data0.1[,2]), col="red")
abline(h=beta, col="blue")
#plot(alphas[2,],main="Normal",xlab ="Sample size", ylab=expression(alpha))
#abline(h=alpha, col="blue")
#abline(h=mean_alphas[2], col="red")
hist(1/X_data0.1[,2],prob = TRUE,main = expression(paste("Densities of ", beta)),
xlab=expression(beta),col= "white", ylim = c(0,450))
lines(density(1/X_data0.1[,2]), col= "red")

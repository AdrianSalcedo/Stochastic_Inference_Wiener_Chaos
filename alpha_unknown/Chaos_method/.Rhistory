delta <- Ti/n
TiempoC<-seq(0, Ti, length.out = n+1)
TL<-length(TiempoC)
#edo inicial
x0 <- 0
#parametro de la apriori es exponencial, con mean 1/lambda
lambda <- 0.75
#numero de puntos en el puente
nb <- 10
#tamaño de muestra para alpha
M <- 5000
#periodo de calentamiento
K<- 5000
#número de puentes a utilizar en cada iteración
#Nbm <- 1000
Nrow<- 100000
setwd("D:/DiffusionBridgesWienerExpantion/Stochastic_Inference_Wiener_Chaos/alpha_unknown/Chaos_method")
#estimacion bayesiana del OU caso 1
source("Ou-Chaos-functions-bayes.r")
source("EM_Ou_Estimador_Stefano.r")
source('Ou_Chaos_functions.R')
library('truncnorm')
#parámetros del proceso
alpha<-1.0
beta<-1.0
Ti<- 1
TF <- Ti
n<- 1000
delta <- Ti/n
TiempoC<-seq(0, Ti, length.out = n+1)
TL<-length(TiempoC)
#edo inicial
x0 <- 0
#parametro de la apriori es exponencial, con mean 1/lambda
lambda <- 0.75
#numero de puntos en el puente
nb <- 10
#tamaño de muestra para alpha
M <- 5000
#periodo de calentamiento
K<- 5000
#número de puentes a utilizar en cada iteración
#Nbm <- 1000
Nrow<- 100000
X <- read.csv("Data_alpha1beta0.1.csv")
X<-as.numeric(X[,2])
#estimacion bayesiana del OU caso 1
source("Ou-Chaos-functions-bayes.r")
source("EM_Ou_Estimador_Stefano.r")
source('Ou_Chaos_functions.R')
library('truncnorm')
#parámetros del proceso
alpha<-1.0
beta<-1.0
Ti<- 1
TF <- Ti
n<- 1000
delta <- Ti/n
TiempoC<-seq(0, Ti, length.out = n+1)
TL<-length(TiempoC)
#edo inicial
x0 <- 0
#parametro de la apriori es exponencial, con mean 1/lambda
lambda <- 0.75
#numero de puntos en el puente
nb <- 10
#tamaño de muestra para alpha
M <- 5000
#periodo de calentamiento
K<- 5000
#número de puentes a utilizar en cada iteración
#Nbm <- 1000
Nrow<- 100000
X <- read.csv("Data_alpha1beta0.1.csv")
X<-as.numeric(X[,2])
#X<- OU_EULER(x0,n,Ti,alpha,beta)
Est_alpha<- Est_stefano_alpha(X,delta)
Est_beta <- Est_stefano_beta(X,Est_alpha,delta)
print(c(Est_alpha,Est_beta))
Xd <- Data_reduction(X,10)
No <- length(Xd)-1
deltad <- Ti/No
par(mfrow = c(1, 2))
plot(X,type = "l")
plot(Xd,type = "l")
alpha_prior(lambda)
alphas=Gibb_OU_chaos(Xd,nb,deltad,beta,lambda,K,M,Nrow,Nbm)
#estimacion bayesiana del OU caso 1
source("Ou-Chaos-functions-bayes.r")
source("EM_Ou_Estimador_Stefano.r")
source('Ou_Chaos_functions.R')
library('truncnorm')
#parámetros del proceso
alpha<-1.0
beta<-1.0
Ti<- 1
TF <- Ti
n<- 1000
delta <- Ti/n
TiempoC<-seq(0, Ti, length.out = n+1)
TL<-length(TiempoC)
#edo inicial
x0 <- 0
#parametro de la apriori es exponencial, con mean 1/lambda
lambda <- 0.75
#numero de puntos en el puente
nb <- 10
#tamaño de muestra para alpha
M <- 5000
#periodo de calentamiento
K<- 5000
#número de puentes a utilizar en cada iteración
#Nbm <- 1000
Nrow<- 100000
X <- read.csv("Data_alpha1beta0.1.csv")
X<-as.numeric(X[,2])
#X<- OU_EULER(x0,n,Ti,alpha,beta)
Est_alpha<- Est_stefano_alpha(X,delta)
Est_beta <- Est_stefano_beta(X,Est_alpha,delta)
print(c(Est_alpha,Est_beta))
Xd <- Data_reduction(X,10)
No <- length(Xd)-1
deltad <- Ti/No
par(mfrow = c(1, 2))
plot(X,type = "l")
plot(Xd,type = "l")
alpha_prior(lambda)
alphas=Gibb_OU_chaos(Xd,nb,deltad,beta,lambda,K,M,Nrow,Nbm)
#estimacion bayesiana del OU caso 1
source("Ou-Chaos-functions-bayes.r")
source("EM_Ou_Estimador_Stefano.r")
source('Ou_Chaos_functions.R')
library('truncnorm')
#parámetros del proceso
alpha<-1.0
beta<-1.0
Ti<- 1
TF <- Ti
n<- 1000
delta <- Ti/n
TiempoC<-seq(0, Ti, length.out = n+1)
TL<-length(TiempoC)
#edo inicial
x0 <- 0
#parametro de la apriori es exponencial, con mean 1/lambda
lambda <- 0.75
#numero de puntos en el puente
nb <- 10
#tamaño de muestra para alpha
M <- 5000
#periodo de calentamiento
K<- 5000
#número de puentes a utilizar en cada iteración
#Nbm <- 1000
Nrow<- 100000
X <- read.csv("Data_alpha1beta0.1.csv")
X<-as.numeric(X[,2])
#X<- OU_EULER(x0,n,Ti,alpha,beta)
Est_alpha<- Est_stefano_alpha(X,delta)
Est_beta <- Est_stefano_beta(X,Est_alpha,delta)
print(c(Est_alpha,Est_beta))
Xd <- Data_reduction(X,10)
No <- length(Xd)-1
deltad <- Ti/No
par(mfrow = c(1, 2))
plot(X,type = "l")
plot(Xd,type = "l")
alpha_prior(lambda)
alphas=Gibb_OU_chaos(Xd,nb,deltad,beta,lambda,K,M,Nrow,Nbm)
mean_alphas = rowMeans(alphas)
mean_alphas
write.csv(t(alphas),"Data_Alphas_1_beta1.0_T10_lambda0.01.csv")
quantile(alphas[1,],prob = c(0.025,0.975))
quantile(alphas[2,],prob = c(0.025,0.975))
#estimacion bayesiana del OU caso 1
source("Ou-Chaos-functions-bayes.r")
source("EM_Ou_Estimador_Stefano.r")
source('Ou_Chaos_functions.R')
library('truncnorm')
#parámetros del proceso
alpha<-1.0
beta<-1.0
Ti<- 1
TF <- Ti
n<- 1000
delta <- Ti/n
TiempoC<-seq(0, Ti, length.out = n+1)
TL<-length(TiempoC)
#edo inicial
x0 <- 0
#parametro de la apriori es exponencial, con mean 1/lambda
lambda <- 0.75
#numero de puntos en el puente
nb <- 10
#tamaño de muestra para alpha
M <- 5000
#periodo de calentamiento
K<- 5000
#número de puentes a utilizar en cada iteración
#Nbm <- 1000
Nrow<- 100000
X <- read.csv("Data_alpha1beta1.csv")
X<-as.numeric(X[,2])
Est_alpha<- Est_stefano_alpha(X,delta)
Est_beta <- Est_stefano_beta(X,Est_alpha,delta)
print(c(Est_alpha,Est_beta))
Xd <- Data_reduction(X,10)
No <- length(Xd)-1
deltad <- Ti/No
par(mfrow = c(1, 2))
plot(X,type = "l")
plot(Xd,type = "l")
alpha_prior(lambda)
alphas=Gibb_OU_chaos(Xd,nb,deltad,beta,lambda,K,M,Nrow,Nbm)
mean_alphas = rowMeans(alphas)
mean_alphas
write.csv(t(alphas),"Data_Alphas_1_beta1.0_T10_lambda0.01.csv")
quantile(alphas[1,],prob = c(0.025,0.975))
quantile(alphas[2,],prob = c(0.025,0.975))
layout(matrix(c(1,3,2,3), nrow = 2, ncol = 2, byrow = TRUE))
plot(alphas[1,],main="Truncated Normal",xlab ="", ylab=expression(alpha))
abline(h=mean_alphas[1], col="red")
abline(h=alpha, col="blue")
plot(alphas[2,],main="Normal",xlab ="Sample size", ylab=expression(alpha))
abline(h=alpha, col="blue")
layout(matrix(c(1,3,2,3), nrow = 2, ncol = 2, byrow = TRUE))
plot(alphas[1,],main="Truncated Normal",xlab ="", ylab=expression(alpha))
abline(h=mean_alphas[1], col="red")
layout(matrix(c(1,2), nrow = 1, ncol = 2, byrow = TRUE))
plot(alphas[1,],main="Truncated Normal",xlab ="", ylab=expression(alpha))
abline(h=mean_alphas[1], col="red")
abline(h=alpha, col="blue")
plot(density(alphas[1,]),main = expression(paste("Densities of ", alpha)),
xlab=expression(alpha)) + lines(density(alphas[2,]), col="red")
plot(density(alphas[1,]),main = expression(paste("Densities of ", alpha)),
xlab=expression(alpha))
layout(matrix(c(1,2), nrow = 1, ncol = 2, byrow = TRUE))
plot(alphas[1,],main="Truncated Normal",xlab ="", ylab=expression(alpha))
abline(h=mean_alphas[1], col="red")
abline(h=alpha, col="blue")
#plot(alphas[2,],main="Normal",xlab ="Sample size", ylab=expression(alpha))
#abline(h=alpha, col="blue")
#abline(h=mean_alphas[2], col="red")
plot(density(alphas[1,]),main = expression(paste("Densities of ", alpha)),
xlab=expression(alpha))
#parametro de la apriori es exponencial, con mean 1/lambda
lambda <- 0.755
Xd <- Data_reduction(X,10)
No <- length(Xd)-1
deltad <- Ti/No
par(mfrow = c(1, 2))
plot(X,type = "l")
plot(Xd,type = "l")
alpha_prior(lambda)
alphas=Gibb_OU_chaos(Xd,nb,deltad,beta,lambda,K,M,Nrow,Nbm)
#parametro de la apriori es exponencial, con mean 1/lambda
lambda <- 0.745
Xd <- Data_reduction(X,10)
No <- length(Xd)-1
deltad <- Ti/No
par(mfrow = c(1, 2))
plot(X,type = "l")
plot(Xd,type = "l")
alpha_prior(lambda)
alphas=Gibb_OU_chaos(Xd,nb,deltad,beta,lambda,K,M,Nrow,Nbm)
mean_alphas = rowMeans(alphas)
mean_alphas
#write.csv(t(alphas),"Data_Alphas_1_beta1.0_T10_lambda0.01.csv")
quantile(alphas[1,],prob = c(0.025,0.975))
quantile(alphas[2,],prob = c(0.025,0.975))
layout(matrix(c(1,2), nrow = 1, ncol = 2, byrow = TRUE))
plot(alphas[1,],main="Truncated Normal",xlab ="", ylab=expression(alpha))
abline(h=mean_alphas[1], col="red")
abline(h=alpha, col="blue")
#plot(alphas[2,],main="Normal",xlab ="Sample size", ylab=expression(alpha))
#abline(h=alpha, col="blue")
#abline(h=mean_alphas[2], col="red")
plot(density(alphas[1,]),main = expression(paste("Densities of ", alpha)),
xlab=expression(alpha)) #+ lines(density(alphas[2,]), col="red")
legend("topright",legend = c("Truncated", "Normal"),lty = c(1, 1), col = c(1, 2),
cex = 0.8,lwd = 2)
layout(matrix(c(1,2), nrow = 1, ncol = 2, byrow = TRUE))
plot(alphas[1,],main="Truncated Normal",xlab ="", ylab=expression(alpha))
abline(h=mean_alphas[1], col="red")
abline(h=alpha, col="blue")
#plot(alphas[2,],main="Normal",xlab ="Sample size", ylab=expression(alpha))
#abline(h=alpha, col="blue")
#abline(h=mean_alphas[2], col="red")
plot(density(alphas[1,]),main = expression(paste("Densities of ", alpha)),
xlab=expression(alpha)) #+ lines(density(alphas[2,]), col="red")
#legend("topright",legend = c("Truncated", "Normal"),lty = c(1, 1), col = c(1, 2),
#       cex = 0.8,lwd = 2)
layout(matrix(c(1,2), nrow = 1, ncol = 2, byrow = TRUE))
plot(alphas[1,],main="Truncated Normal",xlab ="", ylab=expression(alpha))
abline(h=mean_alphas[1], col="red")
abline(h=alpha, col="blue")
#plot(alphas[2,],main="Normal",xlab ="Sample size", ylab=expression(alpha))
#abline(h=alpha, col="blue")
#abline(h=mean_alphas[2], col="red")
plot(density(alphas[1,]),main = expression(paste("Densities of ", alpha)),
xlab=expression(alpha)) + lines(hist(alphas[1,]))
layout(matrix(c(1,2), nrow = 1, ncol = 2, byrow = TRUE))
plot(alphas[1,],main="Truncated Normal",xlab ="", ylab=expression(alpha))
abline(h=mean_alphas[1], col="red")
abline(h=alpha, col="blue")
#plot(alphas[2,],main="Normal",xlab ="Sample size", ylab=expression(alpha))
#abline(h=alpha, col="blue")
#abline(h=mean_alphas[2], col="red")
plot(density(alphas[1,]),main = expression(paste("Densities of ", alpha)),
xlab=expression(alpha)) + lines(hist(alphas[1,]))
layout(matrix(c(1,2), nrow = 1, ncol = 2, byrow = TRUE))
plot(alphas[1,],main="Truncated Normal",xlab ="", ylab=expression(alpha))
abline(h=mean_alphas[1], col="red")
abline(h=alpha, col="blue")
#plot(alphas[2,],main="Normal",xlab ="Sample size", ylab=expression(alpha))
#abline(h=alpha, col="blue")
#abline(h=mean_alphas[2], col="red")
plot(density(alphas[1,]),main = expression(paste("Densities of ", alpha)),
xlab=expression(alpha)) + lines(hist(alphas[1,]))
plot(density(alphas[1,]),main = expression(paste("Densities of ", alpha)),
xlab=expression(alpha))
+ lines(hist(alphas[1,]))
layout(matrix(c(1,2), nrow = 1, ncol = 2, byrow = TRUE))
plot(alphas[1,],main="Truncated Normal",xlab ="", ylab=expression(alpha))
abline(h=mean_alphas[1], col="red")
abline(h=alpha, col="blue")
#plot(alphas[2,],main="Normal",xlab ="Sample size", ylab=expression(alpha))
#abline(h=alpha, col="blue")
#abline(h=mean_alphas[2], col="red")
plot(density(alphas[1,]),main = expression(paste("Densities of ", alpha)),
xlab=expression(alpha)) + lines(hist(alphas[1,]))
layout(matrix(c(1,2), nrow = 1, ncol = 2, byrow = TRUE))
plot(alphas[1,],main="Truncated Normal",xlab ="", ylab=expression(alpha))
abline(h=mean_alphas[1], col="red")
abline(h=alpha, col="blue")
#plot(alphas[2,],main="Normal",xlab ="Sample size", ylab=expression(alpha))
#abline(h=alpha, col="blue")
#abline(h=mean_alphas[2], col="red")
hist((alphas[1,]),main = expression(paste("Densities of ", alpha)),
xlab=expression(alpha)) + lines(alphas[1,])
layout(matrix(c(1,2), nrow = 1, ncol = 2, byrow = TRUE))
plot(alphas[1,],main="Truncated Normal",xlab ="", ylab=expression(alpha))
abline(h=mean_alphas[1], col="red")
abline(h=alpha, col="blue")
#plot(alphas[2,],main="Normal",xlab ="Sample size", ylab=expression(alpha))
#abline(h=alpha, col="blue")
#abline(h=mean_alphas[2], col="red")
hist((alphas[1,]),prob = TRUE,main = expression(paste("Densities of ", alpha)),
xlab=expression(alpha)) + lines(alphas[1,])
layout(matrix(c(1,2), nrow = 1, ncol = 2, byrow = TRUE))
plot(alphas[1,],main="Truncated Normal",xlab ="", ylab=expression(alpha))
abline(h=mean_alphas[1], col="red")
abline(h=alpha, col="blue")
#plot(alphas[2,],main="Normal",xlab ="Sample size", ylab=expression(alpha))
#abline(h=alpha, col="blue")
#abline(h=mean_alphas[2], col="red")
hist((alphas[1,]),prob = TRUE,main = expression(paste("Densities of ", alpha)),
xlab=expression(alpha))
lines(alphas[1,])
layout(matrix(c(1,2), nrow = 1, ncol = 2, byrow = TRUE))
plot(alphas[1,],main="Truncated Normal",xlab ="", ylab=expression(alpha))
abline(h=mean_alphas[1], col="red")
abline(h=alpha, col="blue")
#plot(alphas[2,],main="Normal",xlab ="Sample size", ylab=expression(alpha))
#abline(h=alpha, col="blue")
#abline(h=mean_alphas[2], col="red")
hist((alphas[1,]),prob = TRUE,main = expression(paste("Densities of ", alpha)),
xlab=expression(alpha))
lines(density(alphas[1,]))
layout(matrix(c(1,2), nrow = 1, ncol = 2, byrow = TRUE))
plot(alphas[1,],main="Truncated Normal",xlab ="", ylab=expression(alpha))
abline(h=mean_alphas[1], col="red")
abline(h=alpha, col="blue")
#plot(alphas[2,],main="Normal",xlab ="Sample size", ylab=expression(alpha))
#abline(h=alpha, col="blue")
#abline(h=mean_alphas[2], col="red")
hist((alphas[1,]),prob = TRUE,main = expression(paste("Densities of ", alpha)),
xlab=expression(alpha))
lines(density(alphas[1,]), col= "red")
layout(matrix(c(1,2), nrow = 1, ncol = 2, byrow = TRUE))
plot(alphas[1,],main="Truncated Normal",xlab ="", ylab=expression(alpha))
abline(h=mean_alphas[1], col="red")
abline(h=alpha, col="blue")
#plot(alphas[2,],main="Normal",xlab ="Sample size", ylab=expression(alpha))
#abline(h=alpha, col="blue")
#abline(h=mean_alphas[2], col="red")
hist((alphas[1,]),prob = TRUE,main = expression(paste("Densities of ", alpha)),
xlab=expression(alpha),col= "white")
lines(density(alphas[1,]), col= "red")
layout(matrix(c(1,2), nrow = 1, ncol = 2, byrow = TRUE))
plot(alphas[1,],main="Truncated Normal",xlab ="", ylab=expression(alpha))
abline(h=mean_alphas[1], col="red")
abline(h=alpha, col="blue")
#plot(alphas[2,],main="Normal",xlab ="Sample size", ylab=expression(alpha))
#abline(h=alpha, col="blue")
#abline(h=mean_alphas[2], col="red")
hist((alphas[1,]),prob = TRUE,main = expression(paste("Densities of ", alpha)),
xlab=expression(alpha),col= "white")
lines(density(alphas[1,]), col= "red",prob = TRUE)
layout(matrix(c(1,2), nrow = 1, ncol = 2, byrow = TRUE))
plot(alphas[1,],main="Truncated Normal",xlab ="", ylab=expression(alpha))
abline(h=mean_alphas[1], col="red")
abline(h=alpha, col="blue")
#plot(alphas[2,],main="Normal",xlab ="Sample size", ylab=expression(alpha))
#abline(h=alpha, col="blue")
#abline(h=mean_alphas[2], col="red")
hist((alphas[1,]),prob = TRUE,main = expression(paste("Densities of ", alpha)),
xlab=expression(alpha),col= "white")
lines(density(alphas[1,]), col= "red")
#estimacion bayesiana del OU caso 1
source("Ou-Chaos-functions-bayes.r")
source("EM_Ou_Estimador_Stefano.r")
source('Ou_Chaos_functions.R')
library('truncnorm')
#parámetros del proceso
alpha<-1.0
beta<-1.0
Ti<- 1
TF <- Ti
n<- 1000
delta <- Ti/n
TiempoC<-seq(0, Ti, length.out = n+1)
TL<-length(TiempoC)
#edo inicial
x0 <- 0
#parametro de la apriori es exponencial, con mean 1/lambda
lambda <- 0.75
#numero de puntos en el puente
nb <- 10
#tamaño de muestra para alpha
M <- 5000
#periodo de calentamiento
K<- 5000
#número de puentes a utilizar en cada iteración
#Nbm <- 1000
Nrow<- 100000
X <- read.csv("Data_alpha1beta1.csv")
X<-as.numeric(X[,2])
#X<- OU_EULER(x0,n,Ti,alpha,beta)
Est_alpha<- Est_stefano_alpha(X,delta)
Est_beta <- Est_stefano_beta(X,Est_alpha,delta)
print(c(Est_alpha,Est_beta))
Xd <- Data_reduction(X,10)
No <- length(Xd)-1
deltad <- Ti/No
par(mfrow = c(1, 2))
plot(X,type = "l")
plot(Xd,type = "l")
alpha_prior(lambda)
alphas=Gibb_OU_chaos(Xd,nb,deltad,beta,lambda,K,M,Nrow,Nbm)
mean_alphas = rowMeans(alphas)
mean_alphas
#write.csv(t(alphas),"Data_Alphas_1_beta1.0_T10_lambda0.01.csv")
quantile(alphas[1,],prob = c(0.025,0.975))
quantile(alphas[2,],prob = c(0.025,0.975))
layout(matrix(c(1,2), nrow = 1, ncol = 2, byrow = TRUE))
plot(alphas[1,],main="Truncated Normal",xlab ="", ylab=expression(alpha))
abline(h=mean_alphas[1], col="red")
abline(h=alpha, col="blue")
#plot(alphas[2,],main="Normal",xlab ="Sample size", ylab=expression(alpha))
#abline(h=alpha, col="blue")
#abline(h=mean_alphas[2], col="red")
hist((alphas[1,]),prob = TRUE,main = expression(paste("Densities of ", alpha)),
xlab=expression(alpha),col= "white")
lines(density(alphas[1,]), col= "red")
write.csv(t(alphas),"Data_Alphas_1_beta1.0_T1_lambda0.05.csv")
X_data0.1 <- read.csv("Data_Alphas_1_beta0.1_T10_lambda5.799999.csv",header = T)
X_data0.5 <- read.csv("Data_Alphas_1_beta0.5_T10_lambda4.csv", header = T)
X_data0.8 <- read.csv("Data_Alphas_1_beta0.8_T10_lambda1.8.csv", header = T)
X_data1.0 <- read.csv("Data_Alphas_1_beta1.0_T10_lambda0.01.csv", header = T)
layout(matrix(c(1,1,1,1), nrow = 2, ncol = 2, byrow = TRUE))
plot(density(X_data0.1[,2]),main = expression(paste("Densities of ", alpha)),
xlab=expression(alpha), col="black",lwd = 2,ylim=c(0,1))
lines(density(X_data0.5[,2]), col="red",lwd = 2)
lines(density(X_data0.8[,2]), col="blue",lwd = 2)
lines(density(X_data1.0[,2]), col="darkgreen",lwd = 2)
legend("topright",
legend = c(expression(paste(beta," = 0.1,",lambda, " = 5.799999")),
expression(paste(beta," = 0.5,",lambda, " = 4")),
expression(paste(beta," = 0.8,",lambda, " = 1.8")),
expression(paste(beta," = 1.0,",lambda, " = 0.01"))),lty = c(1, 1),
col = c("black","red","blue","darkgreen"),cex = 1.0,lwd = 3)
plot(alphas[1,],main="Truncated Normal",xlab ="", ylab=expression(alpha))
X_data0.1 <- read.csv("Data_Alphas_1_beta0.1_T1_lambda1.4.csv",header = T)
X_data0.5 <- read.csv("Data_Alphas_1_beta0.5_T1_lambda1.2.csv", header = T)
X_data0.8 <- read.csv("Data_Alphas_1_beta0.8_T1_lambda1.05.csv", header = T)
X_data1.0 <- read.csv("Data_Alphas_1_beta1.0_T1_lambda0.75.csv", header = T)
layout(matrix(c(1,1,1,1), nrow = 2, ncol = 2, byrow = TRUE))
plot(density(X_data0.1[,2]),main = expression(paste("Densities of ", alpha)),
xlab=expression(alpha), col="black",lwd = 2,ylim=c(0,1))
lines(density(X_data0.5[,2]), col="red",lwd = 2)
lines(density(X_data0.8[,2]), col="blue",lwd = 2)
lines(density(X_data1.0[,2]), col="darkgreen",lwd = 2)
legend("topright",
legend = c(expression(paste(beta," = 0.1,",lambda, " = 5.799999")),
expression(paste(beta," = 0.5,",lambda, " = 4")),
expression(paste(beta," = 0.8,",lambda, " = 1.8")),
expression(paste(beta," = 1.0,",lambda, " = 0.01"))),lty = c(1, 1),
col = c("black","red","blue","darkgreen"),cex = 1.0,lwd = 3)
plot(alphas[1,],main="Truncated Normal",xlab ="", ylab=expression(alpha))
quantile(X_data0.1[,2],prob = c(0.025,0.975))
mean(X_data0.1[,2])
quantile(X_data0.5[,3],prob = c(0.025,0.975))
mean(X_data0.5[,3])
quantile(X_data0.1[,3],prob = c(0.025,0.975))
mean(X_data0.1[,3])
quantile(X_data0.5[,2],prob = c(0.025,0.975))
mean(X_data0.5[,2])
quantile(X_data0.8[,2],prob = c(0.025,0.975))
mean(X_data0.8[,2])
quantile(X_data1.0[,2],prob = c(0.025,0.975))
mean(X_data1.0[,2])

RK31 = -(M[1,1]*(X[1,i]+0.5*delta*RK21)+M[1,2]*(X[2,i]+0.5*delta*RK22)) + sigma11*sqrt(2/tf)*sin(1*pi*(Tiempo[i]+delta/2)/tf)+sigma12*sqrt(2/tf)*sin(j*pi*(Tiempo[i]+delta/2)/tf)
RK32 = -(M[2,1]*(X[1,i]+0.5*delta*RK21)+M[2,2]*(X[2,i]+0.5*delta*RK22)) + sigma21*sqrt(2/tf)*sin(1*pi*(Tiempo[i]+delta/2)/tf)+sigma22*sqrt(2/tf)*sin(j*pi*(Tiempo[i]+delta/2)/tf)
RK41 = -(M[1,1]*(X[1,i]+delta*RK31)+M[1,2]*(X[2,i]+delta*RK32)) +sigma11*sqrt(2/tf)*sin(1*pi*(Tiempo[i]+delta)/tf)+sigma12*sqrt(2/tf)*sin(j*pi*(Tiempo[i]+delta)/tf)
RK42 = -(M[2,1]*(X[1,i]+delta*RK31)+M[2,2]*(X[1,i]+delta*RK32)) +sigma21*sqrt(2/tf)*sin(1*pi*(Tiempo[i]+delta)/tf)+sigma22*sqrt(2/tf)*sin(j*pi*(Tiempo[i]+delta)/tf)
X[1,i+1] = X[1,i] + (1/6)*delta*(RK11+2*RK21+2*RK31+RK41)
X[2,i+1] = X[2,i] + (1/6)*delta*(RK12+2*RK22+2*RK32+RK42)
}
return(X)
}
library("plot3D")
#System conf
n<-1000
nb <-500
t0 <-0
tf <-1
delta <- (tf-t0)/n
Tiempo <-seq(t0, tf, length.out = n+1)
TL<-length(Tiempo)
#initial conditions
x01 <- 0
x02 <- 0
M11 <-1.5
M12 <-1
M21 <-1
M22 <-1.5
sigma11 <-1
sigma12 <-1
sigma21 <-1
sigma22 <-1
theta <- c(1,1)
x0 <- c(x01,x02)
M <- matrix(c(M11,M12,M21,M22),nrow = 2,ncol = 2)
Sigma <- matrix(c(sigma11,sigma12,sigma21,sigma22),nrow = 2,ncol = 2)
M_Y1=mat.or.vec(10,TL)
M_Y2=mat.or.vec(10,TL)
M2_Y1=mat.or.vec(10,TL)
M2_Y2=mat.or.vec(10,TL)
X_0<- OU_2dRK(x0,n)
Y_0<-matrix(0,2,n+1)
int1 <- matrix(0,2,n+1)
int1=cbind((Tiempo[TL]-Tiempo[1:(TL-1)])*Integrate2d_Xms(1/(tf-Tiempo[-TL]),X_0),0)
for(i in 1:TL)
{
Y_0[1,i]= x0[1]+(theta[1]-x0[1])*Tiempo[i]/tf+int1[1,i]
Y_0[2,i]= x0[2]+(theta[2]-x0[2])*Tiempo[i]/tf+int1[2,i]
}
#### propagator for |m|=1
Y1x1=NULL
Y1x2=NULL
Y1_aux=NULL
Y2x1=NULL
Y2x2=NULL
Y2_aux=NULL
for(i in 1:nb){
X_1<-XmOU1_2dRK(i,n)
X_2<-XmOU2_2dRK(i,n)
Y1_aux <- cbind((Tiempo[TL]-Tiempo[1:(TL-1)])*Integrate2d_Xms(1/(tf-Tiempo[-TL]),X_1),0)
Y1x1 <-rbind(Y1x1,Y1_aux[1,])
Y1x2 <-rbind(Y1x2,Y1_aux[2,])
Y2_aux <- cbind((Tiempo[TL]-Tiempo[1:(TL-1)])*Integrate2d_Xms(1/(tf-Tiempo[-TL]),X_2),0)
Y2x1 <-rbind(Y2x1,Y2_aux[1,])
Y2x2 <-rbind(Y2x2,Y2_aux[2,])
}
for (k in 1:10){
print(k)
X1is=rnorm(nb,0,1)
X2is=rnorm(nb,0,1)#fXis(nb,TiempoC)
M_Y1[k,]=apply(Y1x1*X1is[1]*X2is,2,sum)+apply(Y2x1*X2is*X1is[2],2,sum)+Y_0[1,]
M_Y2[k,]=apply(Y1x2*X1is[1]*X2is,2,sum)+apply(Y2x2*X1is[2]*X2is,2,sum)+Y_0[2,]
#M_Y[k,]=Y_0
}
#return(Tiempo,M_Y1)
par(mfrow=c(2,2))
plot(Tiempo,M_Y1[1,],type = 'l',xlab="t",ylab="X1_t")
plot(Tiempo,M_Y2[1,],type = 'l',xlab="t",ylab="Y1_t")
plot(Tiempo,M_Y1[2,],type = 'l',xlab="t",ylab="X1_t")
plot(Tiempo,M_Y2[2,],type = 'l',xlab="t",ylab="Y2_t")
par(mfrow=c(1,2))
lines3D(Tiempo, M_Y1[1,], M_Y2[1,],main=c("Brownian motions",nb),xlab="t",ylab="X_t",zlab="Y_t",col="black",colkey = FALSE,ticktype = "detailed")
lines3D(Tiempo, M_Y1[2,], M_Y2[2,],main=c("Brownian motions",nb),xlab="t",ylab="X_t",zlab="Y_t",col="black",colkey = FALSE,ticktype = "detailed")
Tiempo[-TL]
Tiempo[-TL]
Y1x1
Y1x1*X1is[1]
X1is[1]
Y1x1
length(Y1x1*X1is[1])
length(Y1x1*X1is[1]*X2is)
length(Y1x1*X2is)
length(X2is)
library("plot3D")
#System conf
n<-10000
nb <-500
t0 <-0
tf <-1
delta <- (tf-t0)/n
Tiempo <-seq(t0, tf, length.out = n+1)
TL<-length(Tiempo)
#initial conditions
x01 <- 0
x02 <- 0
M11 <-1.5
M12 <-1
M21 <-1
M22 <-1.5
sigma11 <-1
sigma12 <-1
sigma21 <-1
sigma22 <-1
theta <- c(1,1)
x0 <- c(x01,x02)
M <- matrix(c(M11,M12,M21,M22),nrow = 2,ncol = 2)
Sigma <- matrix(c(sigma11,sigma12,sigma21,sigma22),nrow = 2,ncol = 2)
M_Y1=mat.or.vec(10,TL)
M_Y2=mat.or.vec(10,TL)
M2_Y1=mat.or.vec(10,TL)
M2_Y2=mat.or.vec(10,TL)
X_0<- OU_2dRK(x0,n)
Y_0<-matrix(0,2,n+1)
int1 <- matrix(0,2,n+1)
int1=cbind((Tiempo[TL]-Tiempo[1:(TL-1)])*Integrate2d_Xms(1/(tf-Tiempo[-TL]),X_0),0)
for(i in 1:TL)
{
Y_0[1,i]= x0[1]+(theta[1]-x0[1])*Tiempo[i]/tf+int1[1,i]
Y_0[2,i]= x0[2]+(theta[2]-x0[2])*Tiempo[i]/tf+int1[2,i]
}
#### propagator for |m|=1
Y1x1=NULL
Y1x2=NULL
Y1_aux=NULL
Y2x1=NULL
Y2x2=NULL
Y2_aux=NULL
for(i in 1:nb){
X_1<-XmOU1_2dRK(i,n)
X_2<-XmOU2_2dRK(i,n)
Y1_aux <- cbind((Tiempo[TL]-Tiempo[1:(TL-1)])*Integrate2d_Xms(1/(tf-Tiempo[-TL]),X_1),0)
Y1x1 <-rbind(Y1x1,Y1_aux[1,])
Y1x2 <-rbind(Y1x2,Y1_aux[2,])
Y2_aux <- cbind((Tiempo[TL]-Tiempo[1:(TL-1)])*Integrate2d_Xms(1/(tf-Tiempo[-TL]),X_2),0)
Y2x1 <-rbind(Y2x1,Y2_aux[1,])
Y2x2 <-rbind(Y2x2,Y2_aux[2,])
}
for (k in 1:10){
print(k)
X1is=rnorm(nb,0,1)
X2is=rnorm(nb,0,1)#fXis(nb,TiempoC)
M_Y1[k,]=apply(Y1x1*X1is[1]*X2is,2,sum)+apply(Y2x1*X2is*X1is[2],2,sum)+Y_0[1,]
M_Y2[k,]=apply(Y1x2*X1is[1]*X2is,2,sum)+apply(Y2x2*X1is[2]*X2is,2,sum)+Y_0[2,]
#M_Y[k,]=Y_0
}
#return(Tiempo,M_Y1)
par(mfrow=c(2,2))
plot(Tiempo,M_Y1[1,],type = 'l',xlab="t",ylab="X1_t")
plot(Tiempo,M_Y2[1,],type = 'l',xlab="t",ylab="Y1_t")
plot(Tiempo,M_Y1[2,],type = 'l',xlab="t",ylab="X1_t")
plot(Tiempo,M_Y2[2,],type = 'l',xlab="t",ylab="Y2_t")
par(mfrow=c(1,2))
lines3D(Tiempo, M_Y1[1,], M_Y2[1,],main=c("Brownian motions",nb),xlab="t",ylab="X_t",zlab="Y_t",col="black",colkey = FALSE,ticktype = "detailed")
lines3D(Tiempo, M_Y1[2,], M_Y2[2,],main=c("Brownian motions",nb),xlab="t",ylab="X_t",zlab="Y_t",col="black",colkey = FALSE,ticktype = "detailed")
View(Y1x1)
View(Y1x1)
apply(Y1x1*X1is[1]*X2is,2,sum)
length(apply(Y1x1*X1is[1]*X2is,2,sum))
View(Y1x1)
length(Y_0[1,])
prob_succe <- 0.5
max_ number_trial <- 10
Trail <- rber(max_ number_trial,number_trial,prob_succe)
prob_succe <- 0.5
max_ number_trial <- 10
prob_succe <- 0.5
max_ number_trial <- 10
number_trial <- 1
prob_succe <- 0.5
max_ number_trial <- 10
prob_succe <- 0.5
max_number_trial <- 10
number_trial <- 1
Trails <- rbinom(max_ number_trial,number_trial,prob_succe)
Trails <- rbinom(max_number_trial,number_trial,prob_succe)
Trails
Trails <- rbinom(max_number_trial,number_trial,prob_succe)
Trails
prob <- 0.5
max_number_trial <- 10
number_trial <- 1
sum(Trails == 1)
prob_succe <- sum(Trails == 1)/max_number_trial
prob_succe
prob <- 0.5
max_number_trial <- 100
number_trial <- 1
Trails <- rbinom(max_number_trial,number_trial,prob)
prob_succe <- sum(Trails == 1)/max_number_trial
prob <- 0.5
max_number_trial <- 100
number_trial <- 1
Trails <- rbinom(max_number_trial,number_trial,prob)
prob_succe <- sum(Trails == 1)/max_number_trial
prob_succe
prob <- 0.5
max_number_trial <- 100
number_trial <- 1
Trails <- rbinom(max_number_trial,number_trial,prob)
prob_succe <- sum(Trails == 1)/max_number_trial
prob_succe
prob <- 0.5
max_number_trial <- 100
number_trial <- 1
Trails <- rbinom(max_number_trial,number_trial,prob)
prob_succe <- sum(Trails == 1)/max_number_trial
prob_succe
####### Flip coin ########
prob <- 0.1
max_number_trial <- 100
number_trial <- 1
Trails <- rbinom(max_number_trial,number_trial,prob)
prob_succe <- sum(Trails == 1)/max_number_trial
prob_succe
####### Flip coin ########
prob <- 0.1
max_number_trial <- 100
number_trial <- 1
Trails <- rbinom(max_number_trial,number_trial,prob)
prob_succe <- sum(Trails == 1)/max_number_trial
prob_succe
####### Flip coin ########
prob <- 0.1
max_number_trial <- 100
number_trial <- 1
Trails <- rbinom(max_number_trial,number_trial,prob)
prob_succe <- sum(Trails == 1)/max_number_trial
prob_succe
####### Flip coin ########
prob <- 0.1
max_number_trial <- 100
number_trial <- 1
Trails <- rbinom(max_number_trial,number_trial,prob)
prob_succe <- sum(Trails == 1)/max_number_trial
prob_succe
####### Flip coin ########
prob <- 0.1
max_number_trial <- 10000
number_trial <- 1
Trails <- rbinom(max_number_trial,number_trial,prob)
prob_succe <- sum(Trails == 1)/max_number_trial
prob_succe
####### Flip coin ########
prob <- 0.1
max_number_trial <- 10000
number_trial <- 1
Trails <- rbinom(max_number_trial,number_trial,prob)
prob_succe <- sum(Trails == 1)/max_number_trial
prob_succe
####### Flip coin ########
prob <- 0.1
max_number_trial <- 1000000
number_trial <- 1
Trails <- rbinom(max_number_trial,number_trial,prob)
prob_succe <- sum(Trails == 1)/max_number_trial
prob_succe
####### Flip coin ########
prob <- 0.1
max_number_trial <- 1000000
number_trial <- 1
Trails <- rbinom(max_number_trial,number_trial,prob)
prob_succe <- sum(Trails == 1)/max_number_trial
prob_succe
####### Flip coin ########
prob <- 0.1
max_number_trial <- 1000000
number_trial <- 1
Trails <- rbinom(max_number_trial,number_trial,prob)
prob_succe <- sum(Trails == 1)/max_number_trial
prob_succe
####### Flip coin ########
prob <- 0.1
max_number_trial <- 1000000
number_trial <- 1
Trails <- rbinom(max_number_trial,number_trial,prob)
prob_succe <- sum(Trails == 1)/max_number_trial
prob_succe
####### Flip coin ########
prob <- 0.1
max_number_trial <- 1000000
number_trial <- 1
Trails <- rbinom(max_number_trial,number_trial,prob)
prob_succe <- sum(Trails == 1)/max_number_trial
prob_succe
####### Flip coin ########
prob <- 0.1
max_number_trial <- 1000000
number_trial <- 1
Trails <- rbinom(max_number_trial,number_trial,prob)
prob_succe <- sum(Trails == 1)/max_number_trial
prob_succe
####### Flip coin ########
prob <- 0.1
max_number_trial <- 1000000
number_trial <- 1
Trails <- rbinom(max_number_trial,number_trial,prob)
prob_succe <- sum(Trails == 1)/max_number_trial
prob_succe
####### Flip coin ########
prob <- 0.1
max_number_trial <- 1000000
number_trial <- 1
Trails <- rbinom(max_number_trial,number_trial,prob)
prob_succe <- sum(Trails == 1)/max_number_trial
prob_succe
####### Flip coin ########
prob <- 0.1
max_number_trial <- 100
number_trial <- 1
Trails <- rbinom(max_number_trial,number_trial,prob)
prob_succe <- sum(Trails == 1)/max_number_trial
prob_succe
####### Flip coin ########
prob <- 0.1
max_number_trial <- 1000
number_trial <- 1
Trails <- rbinom(max_number_trial,number_trial,prob)
prob_succe <- sum(Trails == 1)/max_number_trial
prob_succe
par(mfrow = c(1, 2))
for (i in 1:max_number_trial)
{
plot(Trails[1:i])
}
plot(prob_succe[1:i])
T
N <- 1000
s <- 0
Tf <- 1
tau_k <- numeric(N)
for (k in 0:N){
tau_k[k] <- s + k*((Tf-s)/N)
}
tau_k
tau_k[!]
tau_k[1]
tau_k[0]
tau_k <- numeric(N)
Yk_t <- numeric(N+1)
for (k in 1:(N+1)){
tau_k[k] <- s + k*((Tf-s)/N)
}
tau_k
tau_k[1]
tau_k <- numeric(N+1)
Yk_t <- numeric(N+1)
for (k in 1:(N+1)){
tau_k[k] <- s + k*((Tf-s)/N)
}
tau_k[1]
for (k in 1:N){
tau_k[k] <- s + (k-1)*((Tf-s)/N)
}
tau_k
tau_k <- numeric(N)
Yk_t <- numeric(N)
for (k in 1:N){
tau_k[k] <- s + (k-1)*((Tf-s)/N)
}
tau_k
tau_k <- numeric(N+1)
Yk_t <- numeric(N)
for (k in 1:N){
tau_k[k] <- s + (k-1)*((Tf-s)/N)
}
tau_k
tau_k <- numeric(N+1)
Yk_t <- numeric(N)
for (k in 1:N+1){
tau_k[k] <- s + (k-1)*((Tf-s)/N)
}
tau_k
Yk_t[1] <- x0
x0 <- 0
Yk_t[1] <- x0
for (k in 1:N+1){
inc_brow=sqrt(1/N)*rnorm(N,0,1)
tau_k[k] <- s + (k-1)*((Tf-s)/N)
Yk_t[k+1] <- Yk_t[k] + ((Tf-s)/N)*(beta1 - beta2*sin(8*Yk_t[k])) +(1/4)^(1/2)
}
N <- 1000
s <- 0
Tf <- 1
x0 <- 0
beta1 = 2
beta2 = 2
for (k in 1:N+1){
inc_brow=sqrt(1/N)*rnorm(N,0,1)
tau_k[k] <- s + (k-1)*((Tf-s)/N)
Yk_t[k+1] <- Yk_t[k] + ((Tf-s)/N)*(beta1 - beta2*sin(8*Yk_t[k])) +(1/4)^(1/2)
}
plot(tau_k,Yk_t,type="l")
plot(tau_k,Yk_t[1:N],type="l")
Yk_t
length(Yk_t)
tau_k <- numeric(N)
Yk_t <- numeric(N)
Yk_t[1] <- x0
Yk_t
for (k in 2:N){
inc_brow=sqrt(1/N)*rnorm(N,0,1)
tau_k[k+1] <- s + (k-1)*((Tf-s)/N)
Yk_t[k] <- Yk_t[k-1] + ((Tf-s)/N)*(beta1 - beta2*sin(8*Yk_t[k-1])) +(1/4)^(1/2)
}
plot(tau_k,Yk_t,type="l")
for (k in 2:N){
inc_brow=sqrt(1/N)*rnorm(N,0,1)
tau_k[k] <- s + (k-1)*((Tf-s)/N)
Yk_t[k] <- Yk_t[k-1] + ((Tf-s)/N)*(beta1 - beta2*sin(8*Yk_t[k-1])) +(1/4)^(1/2)
}
plot(tau_k,Yk_t,type="l")
tau_k
tau_k <- numeric(N+1)
Yk_t <- numeric(N+1)
Yk_t[1] <- x0
for (k in 2:N+1){
inc_brow=sqrt(1/N)*rnorm(N,0,1)
tau_k[k] <- s + (k-1)*((Tf-s)/N)
Yk_t[k] <- Yk_t[k-1] + ((Tf-s)/N)*(beta1 - beta2*sin(8*Yk_t[k-1])) +(1/4)^(1/2)
}
tau_k
for (k in 1:N+1){
inc_brow=sqrt(1/N)*rnorm(N,0,1)
tau_k[k] <- s + (k-1)*((Tf-s)/N)
}
tau_k
for (k in 2:N+1) {
Yk_t[k] <- Yk_t[k-1] + ((Tf-s)/N)*(beta1 - beta2*sin(8*Yk_t[k-1])) +(1/4)^(1/2)
}
Yk_t
length(Yk_t)
length(tau_k)
plot(tau_k,Yk_t,type="l")
#######################
for (k in 1:N+1){
inc_brow=sqrt(1/N)*rnorm(N,0,1)
tau_k[k] <- s + (k-1)*((Tf-s)/N)
}
for (k in 2:N+1) {
Yk_t[k] <- Yk_t[k-1] + ((Tf-s)/N)*(beta1 - beta2*sin(8*Yk_t[k-1])) +((1/4)^(1/2))*inc_brow[k]
}
plot(tau_k,Yk_t,type="l")
N <- 10000
s <- 0
Tf <- 1
x0 <- 0
beta1 = 2
beta2 = 2
tau_k <- numeric(N+1)
Yk_t <- numeric(N+1)
Yk_t[1] <- x0
#######################
for (k in 1:N+1){
inc_brow=sqrt(1/N)*rnorm(N,0,1)
tau_k[k] <- s + (k-1)*((Tf-s)/N)
}
for (k in 2:N+1) {
Yk_t[k] <- Yk_t[k-1] + ((Tf-s)/N)*(beta1 - beta2*sin(8*Yk_t[k-1])) +((1/4)^(1/2))*inc_brow[k]
}
plot(tau_k,Yk_t,type="l")
N <- 1000
s <- 0
Tf <- 1
x0 <- 0
beta1 = 2
beta2 = 2
tau_k <- numeric(N+1)
Yk_t <- numeric(N+1)
Yk_t[1] <- x0
#######################
for (k in 1:N+1){
inc_brow=sqrt(1/N)*rnorm(N,0,1)
tau_k[k] <- s + (k-1)*((Tf-s)/N)
}
for (k in 2:N+1) {
Yk_t[k] <- Yk_t[k-1] + ((Tf-s)/N)*(beta1 - beta2*sin(8*Yk_t[k-1])) +((1/4)^(1/2))*inc_brow[k]
}
plot(tau_k,Yk_t,type="l")
setwd("D:/DiffusionBridgesWienerExpantion/Stochastic_Inference_Wiener_Chaos/parameters_unknown/Datos buenos")
library(ggplot2)
library(dplyr)
X_data2 <- read.csv("Chaos_Data_alpha0.1_beta0.01_T1_lambda1_9.8lambda2_0.001.csv",header = T)
X_data1 <- read.csv("Chaos_Data_alpha0.05_beta0.001_T1_lambda1_19.8lambda2_0.001.csv", header = T)
X_data3 <- read.csv("Chaos_Data_alpha0.5_beta0.5_T1_lambda1_2.0lambda2_1.0.csv", header = T)
X_data4 <- read.csv("Chaos_Data_alpha1.0_beta0.8_T1_lambda1_0.5lambda2_0.00001.csv", header = T)
quantile(X_data1[,2],prob = c(0.025,0.975))
mean(X_data1[,2])
quantile(X_data1[,3],prob = c(0.025,0.975))
mean(X_data1[,3])
quantile(X_data1[,2],prob = c(0.025,0.975))
mean(X_data1[,2])
quantile(sqrt(1/X_data1[,3]),prob = c(0.025,0.975))
mean(sqrt(1/X_data1[,3]))
quantile(X_data2[,2],prob = c(0.025,0.975))
mean(X_data2[,2])
quantile(sqrt(1/X_data2[,3]),prob = c(0.025,0.975))
mean(sqrt(1/X_data2[,3]))
quantile(X_data3[,2],prob = c(0.025,0.975))
mean(X_data3[,2])
quantile(sqrt(1/X_data3[,3]),prob = c(0.025,0.975))
mean(sqrt(1/X_data3[,3]))
quantile(X_data4[,2],prob = c(0.025,0.975))
mean(X_data4[,2])
quantile(sqrt(1/X_data4[,3]),prob = c(0.025,0.975))
mean(sqrt(1/X_data4[,3]))
